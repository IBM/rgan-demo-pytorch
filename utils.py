import torch
import math

from torch.utils.data import Dataset
from torch.distributions import normal


class SamplesDataset(Dataset):
    def __init__(self, x):
        self.x = x
    
    def __len__(self):
        return len(self.x)

    def __getitem__(self, idx):
        res = self.x[idx]
        return res


class MechanisticModel:
    def __init__(self, mm, x_n, y_n, use_norm=True):
        self.MM = mm
        self.X_N = x_n
        self.Y_N = y_n
        self.use_norm = use_norm

    def __call__(self, x):
        if self.use_norm:
            return self.forward_n(x)
        else:
            return self.forward(x)

    def forward(self, x):
        return self.MM(x)
    
    def forward_n(self, x_n):
        x = self.X_N.inverse(x_n)
        y = self.MM(x)
        y_n = self.Y_N(y)
        return y_n
    
    def scale_pars(self, x_norm):
        return self.X_N.inverse(x_norm)
    

class TorchStandardScaler:
    # def __init__(self, x):
    #     self.fit(x)

    def __call__(self, x):
        x = self.transform(x)
        return x

    def fit(self, x):
        self.mean_ = x.mean(0, keepdim=True)
        self.std_ = x.std(0, unbiased=False, keepdim=True)

    def transform(self, x):
        # x = x.clone()
        x = x - self.mean_
        x = x / (self.std_)
        return x
    
    def inverse(self, x_n):
        # x = x_n.clone()
        x = x_n * self.std_
        x = x + self.mean_
        return x


class NormToBoundsScaler:
    def __init__(self, low, high):
        self.low = low
        self.high = high
        self.delta = high-low
        self.dist = normal.Normal(torch.zeros(low.shape[0],),
                                  torch.ones(low.shape[0]))
        
    # Takes input as normal with loc 0.0, scale 1.0, converts uniform within par ranges
    def inverse(self, x_norm):
        return self.dist.cdf(x_norm) * self.delta + self.low

    def __call__(self, x_norm):
        return self.inverse(x_norm=x_norm)


# Truncated normal distribution code adapted from:
# https://stackoverflow.com/questions/60233216/how-to-make-a-truncated-normal-distribution-in-pytorch
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor: torch.Tensor, mean: float = 0., std: float = 1., a: float = -2., b: float = 2.) -> torch.Tensor:
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

